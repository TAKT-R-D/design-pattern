import type { SidebarsConfig } from "@docusaurus/plugin-content-docs";

// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  /*
  tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],
   */

  // But you can create a sidebar manually
  tutorialSidebar: [
    "intro",
    "design-pattern",
    {
      type: "category",
      label: "AP01: God Object",
      items: [
        "god-object/readme",
        "god-object/refactoring-facade",
        "god-object/refactoring-strategy",
        "god-object/refactoring-state",
        "god-object/refactoring-composite",
        "god-object/refactoring-iterator",
        "god-object/summary",
        "god-object/practice",
      ],
    },
    {
      type: "category",
      label: "AP02: Excessive Branching",
      items: [
        "excessive-branching/readme",
        "excessive-branching/refactoring-strategy",
        "excessive-branching/refactoring-state",
        "excessive-branching/refactoring-command",
        "excessive-branching/refactoring-cor",
        "excessive-branching/refactoring-interpreter",
        "excessive-branching/summary",
        "excessive-branching/practice",
      ],
    },
    {
      type: "category",
      label: "AP03: Scattered Instantiation",
      items: [
        "scattered-instantiation/readme",
        "scattered-instantiation/refactoring-factory-method",
        "scattered-instantiation/refactoring-abstract-factory",
        "scattered-instantiation/refactoring-builder",
        "scattered-instantiation/refactoring-singleton",
        "scattered-instantiation/summary",
        "scattered-instantiation/practice",
      ],
    },
    {
      type: "category",
      label: "AP04: Single State Handling",
      items: [
        "single-state-handling/readme",
        "single-state-handling/refactoring-state",
        "single-state-handling/refactoring-strategy",
        "single-state-handling/refactoring-command",
        "single-state-handling/summary",
        "single-state-handling/practice",
      ],
    },
    {
      type: "category",
      label: "AP05: Duplicate Logic",
      items: [
        "duplicate-logic/readme",
        "duplicate-logic/refactoring-template-method",
        "duplicate-logic/refactoring-strategy",
        "duplicate-logic/refactoring-decorator",
        "duplicate-logic/refactoring-visitor",
        "duplicate-logic/refactoring-prototype",
        "duplicate-logic/summary",
        "duplicate-logic/practice",
      ],
    },
    {
      type: "category",
      label: "AP06: Tight Coupling",
      items: [
        "tight-coupling/readme",
        "tight-coupling/refactoring-observer",
        "tight-coupling/refactoring-mediator",
        "tight-coupling/refactoring-di",
        "tight-coupling/summary",
        "tight-coupling/practice",
      ],
    },
    {
      type: "category",
      label: "AP07: Forced Compatibility",
      items: [
        "forced-compatibility/readme",
        "forced-compatibility/refactoring-adapter",
        "forced-compatibility/refactoring-facade",
        "forced-compatibility/refactoring-proxy",
        "forced-compatibility/summary",
        "forced-compatibility/practice",
      ],
    },
    {
      type: "category",
      label: "AP08: Scattered Concerns",
      items: [
        "scattered-concerns/readme",
        "scattered-concerns/refactoring-singleton",
        "scattered-concerns/refactoring-facade",
        "scattered-concerns/summary",
        "scattered-concerns/practice",
      ],
    },
    {
      type: "category",
      label: "AP09: No Undo History",
      items: [
        "no-undo-history/readme",
        "no-undo-history/refactoring-command",
        "no-undo-history/refactoring-memento",
        "no-undo-history/summary",
        "no-undo-history/practice",
      ],
    },
    {
      type: "category",
      label: "AP10: Exposed Complexity",
      items: [
        "exposed-complexity/readme",
        "exposed-complexity/refactoring-facade",
        "exposed-complexity/refactoring-proxy",
        "exposed-complexity/refactoring-iterator",
        "exposed-complexity/summary",
        "exposed-complexity/practice",
      ],
    },
    {
      type: "category",
      label: "AP11: Hardcoded Variability",
      items: [
        "hardcoded-variability/readme",
        "hardcoded-variability/refactoring-strategy",
        "hardcoded-variability/refactoring-bridge",
        "hardcoded-variability/refactoring-flyweight",
        "hardcoded-variability/refactoring-prototype",
        "hardcoded-variability/refactoring-template-method",
        "hardcoded-variability/summary",
        "hardcoded-variability/practice",
      ],
    },
  ],
};

export default sidebars;
